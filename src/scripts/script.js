// We are going to save the message history here.
let messages = [];
let agentMessages = [];

/**
 * This function will save all the messages that came from session history. These are messages that are loaded if
 * the web page is re-loaded or the user navigates to a different page in the middle of a conversation. This does
 * not include messages with a human agent which are not stored in session history.
 */
function saveHistory(event) {
  messages.push(...event.messages);
}

/**
 * This function will save each message that is generated by the send and receive events.
 */
function saveMessage(event) {
  messages.push(event.data);
}

/**
 * This function will save each message that is generated by the send and receive events with a human agent.
 */
function saveAgentMessage(event) {
  agentMessages.push({
    ...event.data,
    // Add the agent's nickname to this object to make it easier to process both the bot and agent messages.
    agentNickname:
      (event.agentProfile && event.agentProfile.nickname) || "Agent",
  });
}

/**
 * This function will be called when the user selects the "Download history" custom menu option.
 */
function createDownload() {
  let downloadLines = [];
  downloadLines.push("Assistant messages");
  downloadLines.push(createDownloadText("From", "Message"));

  downloadLines = downloadLines.concat(messagesToLines(messages));

  if (agentMessages.length) {
    // If there are any messages with a human agent, add those to the export.
    downloadLines.push("");
    downloadLines.push("Human agent messages");
    downloadLines.push(createDownloadText("From", "Message"));
    downloadLines = downloadLines.concat(messagesToLines(agentMessages));
  }

  return downloadLines.join("\n");
}

/**
 * Converts the given array of messages into an array of "lines" that will correspond to lines in the output file.
 */
function messagesToLines(messages) {
  // We're going to create a comma-separate-value file (CSV). The first column will indicate if the message came
  // from the user or if it came from the bot. The second column will be the text of the message. This code here
  // only supports text responses but it can be updated to support additional types of messages such as "option"
  // responses (buttons and dropdowns) or "connect_to_agent" response. You can find more information about the
  // possible types of responses here: https://cloud.ibm.com/apidocs/assistant/assistant-v2#message-response.
  const downloadLines = [];

  messages.forEach((message) => {
    if (message.input && message.input.text) {
      // This is a message that came from the user.
      downloadLines.push(createDownloadText("You", message.input.text));
    } else if (
      message.output &&
      message.output.generic &&
      message.output.generic.length
    ) {
      // This is a message that came from the assistant or an agent. It can contain an array of individual message items.
      const systemName = message.agentNickname || "Sherlock";
      message.output.generic.forEach((messageItem) => {
        // This is only handling a text response but you can handle other types of responses here as well as
        // custom responses.
        if (messageItem && messageItem.text) {
          downloadLines.push(createDownloadText(systemName, messageItem.text));
        }
      });
    }
  });

  return downloadLines;
}

/**
 * This function will perform a download of the user's chat history. This is called when the user chooses the
 * custom option from the menu.
 */
function doDownload() {
  const downloadContent = createDownload();

  const blob = new Blob([downloadContent], { type: "text/csv" });
  const url = URL.createObjectURL(blob);

  // To automatically trigger a download, we have to create a fake "a" element and then click it.
  const timestamp = new Date()
    .toISOString()
    .replace(/[_:]/g, "-")
    .replace(/.[0-9][0-9][0-9]Z/, "");
  const a = document.createElement("a");
  a.setAttribute("href", url);
  a.setAttribute("download", `Chat History ${timestamp}.csv`);
  a.click();
}

/**
 * Escapes the given piece of text so it can safely be displayed in a CSV file.
 */
function escapeCSV(text) {
  // Remove any newline characters which aren't supported in all CSV formats.
  text = text.replace(/\n/g, " ");

  // If the text contains a comma or a double quote, the entire thing needs to be surrounded by double quotes. If
  // the string contains a double quote, then each double quote needs to be replaced with two double quotes.
  if (text.match(/[,"]/)) {
    return `"${text.replace(/"/g, '""')}"`;
  }
  return text;
}

/**
 * Creates a single row of text that will appear in the output file.
 */
function createDownloadText(from, text) {
  return `${from},${escapeCSV(text)}`;
}

/**
 * This is the function that is called when the web chat code has been loaded and it is ready to be rendered.
 */
function onLoad(instance) {
  // Listen for the send and receive events which will allow us to save the history so it can be downloaded later.
  // See https://web-chat.global.assistant.watson.cloud.ibm.com/docs.html?to=api-events#summary for more
  // about our events.
  instance.on({ type: "send", handler: saveMessage });
  instance.on({ type: "receive", handler: saveMessage });
  instance.on({ type: "agent:send", handler: saveAgentMessage });
  instance.on({ type: "agent:receive", handler: saveAgentMessage });
  instance.on({ type: "history:begin", handler: saveHistory });

  // Add the custom menu option the user can use for both the bot and agent views.
  instance.updateCustomMenuOptions("bot", [
    { text: "Download transcript", handler: doDownload },
  ]);
  instance.updateCustomMenuOptions("agent", [
    { text: "Download transcript", handler: doDownload },
  ]);

  instance.render();
}

// This is the standard web chat configuration object. You can modify these values with the embed code for your
// own assistant if you wish to try this example with your assistant. You can find the documentation for this at
// https://web-chat.global.assistant.watson.cloud.ibm.com/docs.html?to=api-configuration#configurationobject.

if (typeof window !== "undefined") {
  window.watsonAssistantChatOptions = {
    integrationID: "9e1d9225-e6df-4f38-a99f-351d5418a8bd",
    region: "eu-gb",
    serviceInstanceID: "9105472d-0990-4acc-a349-661d4607d608",
    onLoad: onLoad,
  };
  setTimeout(function () {
    const t = document.createElement("script");
    t.src =
      "https://web-chat.global.assistant.watson.appdomain.cloud/versions/" +
      (window.watsonAssistantChatOptions.clientVersion || "latest") +
      "/WatsonAssistantChatEntry.js";
    document.head.appendChild(t);
  });
}

